#!/bin/bash

# Franky - A simple installer and runner for ZerePy
# Usage: franky [command]
#   - install: Install the ZerePy dependencies
#   - serve: Run the ZerePy server

# Configuration
REPO_URL="https://github.com/Marshal-AM/frankyv3.git"
REPO_DIR="frankyv3"
PORT=8000
HOST="0.0.0.0"

# Function to print with color
print_color() {
  local color="$1"
  local message="$2"
  
  case "$color" in
    "red") echo -e "\033[31m$message\033[0m" ;;
    "green") echo -e "\033[32m$message\033[0m" ;;
    "yellow") echo -e "\033[33m$message\033[0m" ;;
    "blue") echo -e "\033[34m$message\033[0m" ;;
    *) echo "$message" ;;
  esac
}

# Check dependencies
check_dependencies() {
  print_color "blue" "Checking dependencies..."
  
  # Check if Python is installed
  if ! command -v python3 >/dev/null 2>&1; then
    print_color "red" "Python 3 not found. Please install Python 3 first."
    exit 1
  else
    PYTHON_VERSION=$(python3 --version)
    print_color "green" "Found $PYTHON_VERSION"
  fi
  
  # Check if pip is installed
  if ! command -v pip3 >/dev/null 2>&1; then
    print_color "red" "Pip not found. Please install pip first."
    exit 1
  else
    PIP_VERSION=$(pip3 --version)
    print_color "green" "Found $PIP_VERSION"
  fi
  
  # Check if Git is installed
  if ! command -v git >/dev/null 2>&1; then
    print_color "red" "Git not found. Please install Git first."
    exit 1
  else
    GIT_VERSION=$(git --version)
    print_color "green" "Found $GIT_VERSION"
  fi
  
  # Check if ngrok is installed (for serve command)
  if [ "$1" == "serve" ] && ! command -v ngrok >/dev/null 2>&1; then
    print_color "yellow" "Warning: ngrok not found. Port forwarding will not be available."
  else
    if [ "$1" == "serve" ]; then
      NGROK_VERSION=$(ngrok --version 2>/dev/null || echo "Unknown version")
      print_color "green" "Found ngrok: $NGROK_VERSION"
    fi
  fi
}

# Install ZerePy
install_zeropy() {
  check_dependencies "install"
  
  print_color "blue" "Installing ZerePy..."
  
  # Clone the repository if it doesn't exist
  if [ ! -d "$REPO_DIR" ]; then
    print_color "yellow" "Cloning repository from $REPO_URL..."
    git clone "$REPO_URL"
    if [ $? -ne 0 ]; then
      print_color "red" "Error: Failed to clone repository."
      exit 1
    fi
  else
    print_color "yellow" "Repository already exists. Updating..."
    cd "$REPO_DIR"
    git pull
    # Stay in the repository directory
  fi
  
  # Make sure we're in the repository directory
  if [ "$(basename $(pwd))" != "$REPO_DIR" ]; then
    print_color "blue" "Entering repository directory: $REPO_DIR"
    cd "$REPO_DIR"
  fi
  
  # Create virtual environment if it doesn't exist
  if [ ! -d "venv" ]; then
    print_color "yellow" "Creating virtual environment..."
    python3 -m venv venv
    if [ $? -ne 0 ]; then
      print_color "red" "Error: Failed to create virtual environment."
      exit 1
    fi
  else
    print_color "yellow" "Virtual environment already exists."
  fi
  
  # Activate virtual environment and install dependencies
  print_color "yellow" "Installing dependencies..."
  source venv/bin/activate
  pip install --upgrade pip
  
  if [ -f "requirements.txt" ]; then
    print_color "blue" "Installing from requirements.txt..."
    pip install python-dotenv prompt-toolkit aiohttp requests fastapi uvicorn
  else
    # Try poetry if available
    if command -v poetry >/dev/null 2>&1; then
      print_color "blue" "Installing with Poetry..."
      poetry install --no-root
    else
      print_color "yellow" "No requirements.txt found. Installing using pip..."
      pip install uvicorn fastapi
    fi
  fi
  
  # Deactivate virtual environment but stay in the directory
  deactivate
  
  print_color "green" "âœ… ZerePy installed successfully in: $(pwd)"
  print_color "green" "Run 'franky serve' to start the server."
}

# Run the ZerePy server
serve_zeropy() {
  check_dependencies "serve"
  
  # Go to the repository directory if not already there
  if [ ! -d "$REPO_DIR" ]; then
    print_color "red" "ZerePy not installed. Run 'franky install' first."
    exit 1
  fi
  
  # Make sure we're in the repository directory
  if [ "$(basename $(pwd))" != "$REPO_DIR" ]; then
    print_color "blue" "Entering repository directory: $REPO_DIR"
    cd "$REPO_DIR"
  fi
  
  if [ ! -d "venv" ]; then
    print_color "red" "Virtual environment not found. Run 'franky install' first."
    exit 1
  fi
  
  # Activate virtual environment and start server
  print_color "blue" "Starting server on $HOST:$PORT..."
  source venv/bin/activate
  
  # Start the server directly (not in background)
  print_color "blue" "Running: python main.py --server --host $HOST --port $PORT"
  
  # Check if ngrok is available
  if command -v ngrok >/dev/null 2>&1; then
    # Start server in background if using ngrok
    python main.py --server --host $HOST --port $PORT &
    SERVER_PID=$!
    
    # Give the server a moment to start
    sleep 2
    
    # Check if server started successfully
    if ! ps -p $SERVER_PID > /dev/null; then
      print_color "red" "Error: Server failed to start."
      deactivate
      exit 1
    fi
    
    print_color "green" "Server running with PID: $SERVER_PID"
    print_color "blue" "Starting ngrok for port forwarding..."
    ngrok http $PORT
    
    # When ngrok is closed, kill the server
    kill $SERVER_PID 2>/dev/null
    print_color "yellow" "Server stopped."
  else
    # Run server directly if no ngrok
    print_color "yellow" "Server will be available at http://$HOST:$PORT"
    python main.py --server --host $HOST --port $PORT
  fi
  
  # Deactivate virtual environment
  deactivate
}

# Create the alias function that makes "franky" work from anywhere
create_alias() {
  # Get the full path to this script
  SCRIPT_PATH=$(readlink -f "$0" 2>/dev/null || realpath "$0" 2>/dev/null || echo "$0")
  SCRIPT_DIR=$(dirname "$SCRIPT_PATH")
  
  # Create a temporary alias script
  cat > "$SCRIPT_DIR/franky" << EOF
#!/bin/bash
$SCRIPT_PATH "\$@"
EOF
  
  chmod +x "$SCRIPT_DIR/franky"
  
  # Add the script directory to PATH temporarily
  export PATH="$SCRIPT_DIR:$PATH"
  
  print_color "green" "You can now use 'franky' command directly."
}

# Main function
if [ -z "$1" ]; then
  print_color "yellow" "Usage: franky [command]"
  print_color "yellow" "Commands:"
  print_color "yellow" "  install    Install ZerePy"
  print_color "yellow" "  serve      Start the ZerePy server"
  exit 1
fi

case "$1" in
  "install")
    install_zeropy
    ;;
  "serve")
    serve_zeropy
    ;;
  *)
    print_color "red" "Unknown command: $1"
    print_color "yellow" "Available commands: install, serve"
    exit 1
    ;;
esac

# Create alias if this script is executed directly
if [[ "$(basename "$0")" != "franky" ]]; then
  create_alias
fi
